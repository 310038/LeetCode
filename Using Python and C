【Python 與 C 的 LeetCode 六月挑戰】第一天 (Invert Binary Tree)
(語法python)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
def invertTree(root):
    if root == None:
        return None
    
    root.left, root.right = root.right, root.left #tuple assignment (python語法) 
    invertTree(root.left)
    invertTree(root.right)
    
    return root

class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        return invertTree(root)


Invert Binary Tree(語法c)
# * Definition for a binary tree node.
#  * struct TreeNode {
#  *     int val;
#  *     struct TreeNode *left;
#  *     struct TreeNode *right;
#  * };
#  */

struct TreeNode* invertTree(struct TreeNode* root){
    if(root == NULL){
        return NULL;
    }
    
    struct TreeNode* temp = root->left;
    root->left = root->right;
    root->right = temp;
    
    invertTree(root->left);
    invertTree(root->right);
    
    return root;

}

【Python 與 C 的 LeetCode 六月挑戰】第二天 (Delete Node in a Linked List)
語法:python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

def deleteNode(node):
    node.val, node.next = node.next.val, node.next.next
    # ex:   4 -> 5 -> 1  -> 9 -> none
    #step1. 4 -> 1 -> 1  -> 9 -> none
    #step2. 4 -> 1 -> 空 -> 9 -> none
class Solution:
    def deleteNode(self, node):
        deleteNode(node)

語法:C
# /**
#  * Definition for singly-linked list.
#  * struct ListNode {
#  *     int val;
#  *     struct ListNode *next;
#  * };
#  */
void deleteNode(struct ListNode* node) {

    node->val =  node->next->val;
    node->next =  node->next->next;
    
}

或是直接一行搞定
void deleteNode(struct ListNode* node) {
    struct ListNode* temp = node->next; #建這個temp，單純為了後面可以free這個mem space
    *node = *node->next;
    free(temp);
    
}
【Python 與 C 的 LeetCode 六月挑戰】第三天 (Two City Scheduling)
語法:python
重點語法:sort(排序)!!!!!
def diff(l):
    return l[0]-l[1]

class Solution:
    def twoCitySchedCost(self, costs: List[List[int]]) -> int:
        costs.sort(key=diff) #把diff當成sort的依據，將差值由小sort到大
        
        countA = 0
        countB = 0
        ans = 0
        
        for costA, costB in costs:
            if countA < len(costs)//2: #因為已經排序完成，所以選前面一半進A隊，(就算diff值重複也無差)
                ans+=costA
                countA += 1
            else:
                ans += costB
                countB += 1
        return ans

語法:C
重點語法:qsort(陣列名稱, 元素個數, 單一元素size, 比較函式)!!!!!
int diff(int *l){
    return l[0] - l[1];
}

int cmp(const void* p1, const void *p2){
    const int* l1 = *(const int**)p1;
    const int* l2 = *(const int**)p2;
    return diff(l1) - diff(l2);
}
int twoCitySchedCost(int** costs, int costsSize, int* costsColSize){
    qsort(costs, costsSize, sizeof(int*), cmp);
    int countA =0;
    int ans = 0;
    for(int i = 0; i < costsSize; i++){
        int costA = costs[i][0];
        int costB = costs[i][1];
        
        if(countA < costsSize/2){
            ans += costA;
            countA += 1;
        }
        
        else{
            ans += costB;
        }
        
    }
    return ans;
}


【Python 與 C 的 LeetCode 六月挑戰】第四天 (Reverse String)
語法:python 練習list語法
class Solution:
    def reverseString(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        s[:]=s[::-1] # s[0:5]=s[-1:-6:-1]


語法:C  練習指標!!!!
void reverseString(char* s, int sSize){
    char* si=s;
    char* sj=s+sSize-1;
    while(si < sj){
        char t = *si;
        *si=*sj;
        *sj=t;
        
        si++;
        sj--;
    }
}

【Python 與 C 的 LeetCode 六月挑戰】第五天 (Random Pick with Weight)
語法:python 練習"累積和(sum)圖"

class Solution:

    def __init__(self, w: List[int]):
        a = [None] * len(w)
        a[0] = w[0]
        for i in range(1, len(w)):
            a[i] =a[i-1] + w[i]
        self._a = a
    # 用套件簡化
    # def __init__(self, w: List[int]):
    #     self._a = tuple(accumulate(w))   

    def pickIndex(self) -> int:
        d = random.randrange(self._a[-1])
        # 用binary search
        #找一個i使得d < self._a[i] and d >= self._a[i-1]
        l, r = 0, len(self._a)
        
        while l < r:
            mid = (l+r)//2
            if d < self._a[mid]:
                if mid == 0 or d >= self._a[mid-1]:
                    return mid 
                else:
                    r = mid
            else:
                l = mid +1
    # 用套件簡化
    # def pickIndex(self) -> int:
    #     d = random.randrange(self._a[-1])
    #     return bisect_right(self._a, d)
#     編號:0 1 2
#     w:  [1,3,3]  ->意思是有1個0 3個1 3個2

#           1     4     7  
#           v     v     v 
#     d:  0 1 2 3 4 5 6   d(dice)就是骰子，從0~6中隨機選一個
#     l: [0,1,1,1,2,2,2] 
#     a: [1,4,7] 
#     a[0] 儲存的是 w[0]
#     a[1] 儲存的是 w[0] + w[1]         = a[0] + w[1]
#     a[2] 儲存的是 w[0] + w[1] + w[2]  = a[1] + w[2]

#  由於l會隨著w增加而增加，所以如果硬要產生l的話，時間複雜度會很大，所以利用"累積和圖"的技巧來
#  取代l，也就是a
# a是編號變號的timing，1代表編號0有1個，4代表編號0+編號1有4個，7代表編號0+編號1+編號2有7個。
# 所以如果骰到5，因為5(d) < 7(c)，所以其值為2
    
# Your Solution object will be instantiated and called as such:
# obj = Solution(w)
# param_1 = obj.pickIndex()


【Python 與 C 的 LeetCode 六月挑戰】第六天 (Queue Reconstruction by Height)
語法:python 
#將input的list做成tuple(元組，以利第一個元素相比，結果平手的話，就再比第二個元素)，
# 可以達到排序的目的，先用第一個元素作為比較對象來sort(加負號使得元素由大到小排)，如果第一個元素大小相等，就比較第二個元素來sort
class Solution:

#     最初的input，people: [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
#     照著身高遞減排，身高一樣的時候，照著前面有多少個大於等於自己的數字遞增排
    
# step 1. 先對input的list 做 sort    
#     先比較第一個元素，由小到大排:        [[4,4],[5,0],[5,2],[6,1],[7,0],[7,1]]
#     在第一個元素加上負號後(變成遞減排):  [[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]]
#     比較第二個元素後:      
    
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        people.sort(key=lambda l:(-l[0], l[1]))
# step 2. 排序完後的順序為，[[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]]，再由下方code一個一個insert進去名為answer的list做排序，
        answer = []
        
        for l in people:
            answer.insert(l[1],l) #l[1]代表看tuple的第二個元素，比方說[7,0]) 就在位置0上insert[7,0]，[7,1]) 在位置1上insert[7,1]，[6,1]) 在位置1上insert[6,1]
            
            # []
            # [[7,0]]                 answer.insert(0, [7,0]) 在位置0上insert[7,0]
            # [[[7,0],[7,1]]          answer.insert(1, [7,1]) 在位置1上insert[7,1]
            # [[[7,0],[6,1],[7,1]]    answer.insert(1, [6,1]) 在位置1上insert[6,1]
            # ...
        return answer


【Python 與 C 的 LeetCode 六月挑戰】第七天 (Coin Change 2)
語法:python 
def change(amount,coins,cache):
        #為了加速runtime: 加入cache(大括弧{})來記錄已算過的找法(組合)
        #               
        #                                 不用最後一種(新來的)面額                有用最後一種(新來的)面額
        # 遞迴式 -> change(amount,coins):= change(amount, coins[:-1]) + change(amount-coins[-1], coins)
        # ex:       change(5, [1,2])== change(5, [1]) + change(5-2, [1,2])
        
        #還要加入邊界條件
        #邊界條件1. 如果amount等於0，就只有一種找法，就是不找
        if amount ==0: return 1
        
        #邊界條件2. 如果已經沒有coin可以找了，那就有0種找法
        
        if len(coins)==0: return 0
        #但要把遞迴式拆成兩段，因為假如amount-coins[-1] < 0 則會出現error，
        # ex: amount:5
        #     coins:[1,2,5,10]
        # 則change(5-10,[1,2,5,10]) 無法計算
        
        #加速階段-1.
        #if change(amount, coins)某個組合曾經有算過:
        #   return 之前算的答案
        if (amount, tuple(coins)) in cache:
            return cache[(amount, tuple(coins))] #因為coins是一個list，在py裡面list不能當鍵值，所以要將coins轉乘tuple
        
        # 第一段:
        result = change(amount, coins[:-1],cache)
        
        #第二段:
        if amount-coins[-1] >= 0:
            result += change(amount-coins[-1],coins,cache) #如果amount-coins[-1] >= 0(最後一個面額可以使用)就將結果+入result
        #加速階段-2.
        #如果沒有算過這個組合，"就把這次的組合記起來"(加入{}cache)
        cache[(amount, tuple(coins))] = result
        return result 
        

        
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        return change(amount, coins,{})

【Python 與 C 的 LeetCode 六月挑戰】第八天 (Power of Two)
語法:python        
def isPowerOfTwo(n):
    if n <=0 :
        return False
    return math.log2(n).is_integer()
class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        return isPowerOfTwo(n)

語法:c
bool isPowerOfTwo(int n){
    return n > 0 && (n&(n-1))==0;

}

【Python 與 C 的 LeetCode 六月挑戰】第九天 (Is Subsequence)
語法:python
練習重點: 雙指標
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        i, j = 0, 0 # i(s的指標),j(t的指標)
        #邊界條件 1. 如果s是空字串，那無條件"對"
        if len(s)==0:
            return True
        
        #邊界條件 2. 如果t為空字串，那除非s也是空字串，不然在t裡面找不到可以與s對應的值
        if len(t) == 0:
            return False
        
        #利用雙指標 
        while True:
            if s[i]==t[j]: #假如找到s[i]==t[j]，就兩個指標都前進一步
                i+=1
                if i==len(s): #每次i(s的指標)前進一步，就check i使否已經走到底，如果已經走到底，則return true
                    return True
            j+=1  #不論有沒有==s，j(t的指標)都要往前一步
            
            if j==len(t): #如果j(t的指標)走到底都沒有找到相同的，則return False
                return False

語法:c
練習重點: 雙指標，還有一些在c語言中處理string的技巧
bool isSubsequence(char * s, char * t){
    # // a[b] <--> *(a+b)
    
    if(*s=='\0'){ #如果str s的第一個值為\0，則代表此str為空
        return true;
    }
    
    if(*t=='\0'){ #如果str t的第一個值為\0，則代表此str為空
        return false;
    } 
        
    while (true){
        if(*s==*t){
            s++;
            if(*s=='\0'){
                return true;
            }
        }
        t++;
        
        if(*t=='\0'){
            return false;
        }
    }
}
【Python 與 C 的 LeetCode 六月挑戰】第十天 (Search Insert Position)
語法:python 
練習重點: binary search
def searchInsert(nums,target):
    #用binary search
    
    left = 0
    right = len(nums)
    
    while left != right:
        mid = (left+right)//2
        
        if nums[mid]==target:
            return mid
        
        if nums[mid] > target:
            right = mid
        else:
            left = mid+1
    return left #傳回left or right or mid 都對，因為跳出while loop代表left == right了

語法:C 
練習重點: binary search
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        return searchInsert(nums,target)

    int searchInsert(int* nums, int numsSize, int target){
    int left = 0;
    int right = numsSize;
    
    while(left != right){
        
        int mid = (left + right) /2;
        
        if(nums[mid] == target){
            return mid;
        }
        
        if(target < nums[mid]){
            right = mid;
        }
        else{
            left = mid + 1;
        }
    }
    
    return left;

}


【Python 與 C 的 LeetCode 六月挑戰】第十一天 (Sort Colors)
語法:python
# !!!!!!!如果一個問題可以用"排序(sort)"解決，那也可以用"算次數"的方式解決!!!!!!!
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        
        
        count = {} #建一個名為count的字典
#在使用"字典"時，要注意如果該key值還沒被建立，是不能直接"讀取"該key值的，
#所以這邊先用if檢查該key值是否存在count這個字典中?如果存在即+1，**否則將該key值的個數設為1(因為前for迴圈的進入條件是n in nums，代表n有在nums中的才會進入loop，因此這些n出現的次數至少為一)**
        for n in nums:
            if n in count:  #如果key值n有在nums中且已經被建立在字典中，則直接+1
                count[n] += 1

            else:           #如果key值n有在nums中但還未被建立在字典中，則直接建立該key值n，並把直設為1
                count[n] = 1

        k = 0
        for n in 0,1,2:
            if n in count:
                for i in range(count[n]):
                    nums[k] = n
                    k += 1

語法:c
void sortColors(int* nums, int numsSize){
    //先建立一個名為count的array，計算有幾個0，幾個1，幾個2
    int count[3]={0,0,0};
    
    for(int i=0; i<numsSize; i++){
        int n= nums[i];
        count[n]++;
    }
    
    //用count來決定要放幾個0，幾個1，幾個2
    for(int i=0; i<numsSize; i++){
        if(count[0] > 0){ 
            nums[i]=0;
            count[0]--; //放完0，記得把0的次數-1
        }
        else if (count[1] >0){
            nums[i]=1;
            count[1]--; //放完1，記得把1的次數-1
        }
        else{
            nums[i]=2;
            count[2]--; //放完2，記得把2的次數-1
        }

    }
}


【Python 與 C 的 LeetCode 六月挑戰】第十二天 (Insert Delete GetRandom O(1))
語法:python 

class RandomizedSet:
    # owing to we crate 2 data structure, we need to justify these 2 structure 
    # everytime we insert/remove a val 

    def __init__(self):
        self.vals = [] #建一個list
        self.m = {} #建一個dictionary. in python, dictionary is using "hash",so we can know whether the val in the list in  O(1)
                    # self.m[x] => 數字x出現在 self.vals 的第幾號
                    # ex: self.vals[self.m[x]] = x 
    def insert(self, val: int) -> bool:
        if val in self.m:
            return False
        else:
            self.vals.append(val)  # O(1)
            self.m[val] = len(self.vals)-1
            return True

    def remove(self, val: int) -> bool:
        if val in self.m:
            #先處理list
            index = self.m[val] # first, create a variable 'index' to remember the val(which we want to remove);
            last_val = self.vals[-1] # second, create a variable 'last_val' to remember "the last val of the list of vals"
            self.vals[index] = last_val #third
            self.vals.pop() #fourth 
            
            #再處理dictionary
            self.m[last_val] = index #要將val(=3)的index更新為index(=2)，更新完後的dic of vals{ 0:0  7:1 5:2 3:2}
            self.m.pop(val) #將欲移除的val(=5)從dictionary中pop(移除) ，更新完後的dic of vals{ 0:0  7:1 3:2}
            return True
            
            # ex: 原初(未處理前) list of vals : [0,7,5,3]; dic of vals{ 0:0  7:1  5:2  3:3}
            # 先處理list，目的是將要remove的值移轉到list的最尾端，以方便用pop來移除，如此才能 O(1)
            # remove 5, 
            # first:index = 2 ; 
            # second: last_val = 3 ; 
            # third: vals[2] = 3 (the list of vals become : [0,7,3,3])
            # fourth: pop the last val in list.val (the list of vals become : [0,7,3])
            
            
        else:
            return False
            

    def getRandom(self) -> int:
        return random.choice(self.vals) #本身就是O(1)


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()

【Python 與 C 的 LeetCode 六月挑戰】第十四天 (Cheapest Flights Within K Stops)
語法:python 
練習重點: 遞迴
def findCheapestPrice(n,flightMap,src,dst,k,cache):
    #邊界條件: 當K(轉站次數)變成-1，代表不存在src->dst的路徑
    if k == -1:
        return -1
    
    # 建立cache來記住可能重複的運算，由於每次recursive會變動的只有src與K，因此相同的src與相同的k會有相同的min_price
    if (src,k) in cache:
        return cache[(src,k)]
    
    min_price = -1 # 一開始就預設不存在任何src->dst(且途經k站以內)的路徑
    #如果有路徑可以到的話: 有班機從s(不是src) 出發到 d(不是dst)，價格為p元
    if src in flightMap:
        for (d, p) in flightMap[src]: # 只考慮從src出發的航班，所以利用已建立的dict(flightMap)去查起點為src的航班資訊
               # src ->(花 p 元) -> d(途經的某一站)
            if d == dst:
                # src ->(花 p 元) -> dst
                price = p
                if min_price == -1 or price < min_price:
                    min_price = price
            else:
                #  RECURSIVE: src ->(花 p 元) -> d 加上 d ->(花費最少錢且最多轉 k-1 次) -> dst 
                #                       p           +               r
                r = findCheapestPrice(n,flightMap,d,dst,k-1,cache)
                if r != -1 : # r很可能途經超過k-1站，如果超過k-1站則return -1, 
                    price = p + r
                    if min_price == -1 or price < min_price:
                        min_price = price
                        
    #把每次的結果(min_price)紀錄到cache中
    cache[(src,k)] = min_price 
    return min_price
        
                
class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        #建一個dict來記錄所有，有從src出發的航班資訊(也就是d終點站跟p價格)
        flightMap = {}
        for (s,d,p) in flights:
            if s not in flightMap: 
                flightMap[s] = [] # 如果s原本不存在這個dict中，要先配一個list給他去append
            flightMap[s].append((d,p))
            
        cache = {}

        return findCheapestPrice(n,flightMap,src,dst,k,cache)
 --------------------------------------------------------------------------------------------------------------------------------
      /Maximum Subarray
int maxSubArray(int* nums, int numsSize){
    int max=nums[0];
    int sum=0;
    for(int i=0; i<numsSize; i++){
        sum+=nums[i];
        if(sum < nums[i]){
            sum=nums[i];
        }
        if(sum > max){
            max=sum;
        }
    }
    return max;
}

暴力法
int maxSubArray(int* nums, int numsSize){
    int max=nums[0];
    for(int i=0; i<numsSize; i++){
        int sum=0;
        for(int j=i; j<numsSize; j++){
            sum+=nums[j];
            if(sum > max){
                max=sum;
            }
        }
    }
    return max;
}

// Best Time to Buy and Sell Stock II
只看相鄰，ex:[7,1,5,3,6,4] --> (5-1)+(6-3)=7
int maxProfit(int* prices, int pricesSize){
    int best=0;
    for(int i=0; i+1<pricesSize; i++){
        if(prices[i+1]-prices[i] > 0){
            best=best+prices[i+1]-prices[i];
        }
    }
    return best;
}

暴力法
int maxProfit(int* prices, int pricesSize){
    // prices:[7, 1, 5, 3, 6, 4] pricesSize :6
    //最後一天要不要進行賣的動作?

    if(pricesSize <= 1) return 0; //邊界條件 ，一定要寫在recursive前面，不然會overflow

    int profit;
    int max = 0;
    
    // 1)假設最後一天決定不賣
    profit = maxProfit(prices, pricesSize-1); //recursive

    if(profit > max) {
        max =profit;
    }
    // 2)假設最後一天決定要賣

    for(int i=1; i<=pricesSize-1; i++){ 
        profit=maxProfit(prices, i) + (prices[pricesSize-1] -prices[i-1] );
        //      ^開放有i天可以做買賣， ^最後一天的股價(=4)      ^第i天的股價
        //       所得的max

        // [7, 1, 5, 3, 6,] + (6, 4) maxProfit(prices, 5) + (4-6)
        // [7, 1, 5, 3,] + (3, 4)    maxProfit(prices, 4) + (4-3)
        // [7, 1, 5,] + (5, 4)       maxProfit(prices, 3) + (4-5)
        // [7, 1] + (1, 4)           maxProfit(prices, 2) + (4-1)
        // [7] + (7, 4)              maxProfit(prices, 1) + (4-7)
        if(profit > max){
            max = profit;
        }
    }
    return max;
}

暴力法(小改)
int maxProfit(int* prices, int pricesSize){
    if(pricesSize <= 1) return 0;
    
    int profits[pricesSize+1]; //create一個陣列來存放最大值，profits[i] = maxProfit( prices, i)

    profits[1]= 0;
    //最後一天不賣
    for(int k=2; k <= pricesSize; k++){ //k代表pricesSize
        //最後一天要不要進行賣的動作?
        
        int profit;
        int max = 0;

        // 1)假設最後一天決定不賣
        profit = profits[k-1];

        if(profit > max) {
            max =profit;
        }

        // 2)假設最後一天決定要賣

        for(int i=1; i<=k-1; i++){ //k代表pricesSize
            profit=profits[i] + prices[k-1] -prices[i-1];
            if(profit > max){
                max = profit;
            }
        }

        profits[k]=max;
    }

    return profits[pricesSize];
}

//
/* c語言，用陣列來存字串，而陣列不能在函數間直接傳遞，所以一般在函數間傳遞的是一個address。
const char *p= "xxxxxxx"; 用 char *p來存字串

*/
--------------------------------------------------
//Counting Elements
1.暴力法
int countElements(int * arr, int arrSize){
    //  題目敘述
    // arr:     [1,1,3,3,5,5,7,7] arrSize: 8
    // plus1:    2,2,4,4,6,6,8,8
    // found:    0 0 0 0 0 0 0 0
    // count:    0+0+0+0+0+0+0+0 = 0
    // output:
    //        return 0;

    int plus1[arrSize]; //建一個陣列，名為plus1
    for(int i=0; i<arrSize; i++){
        plus1[i]=arr[i]+1;
    }

    int found[arrSize] //建一個陣列，名為found
    for(int i=0; i<arrSize; i++){  //在該輪loop中，x_plus是個固定值
        int x_plus1=plus1[i];

        bool isfound = false;
        for(int j=0; j<arrSize; j++){   /*所以再用一個loop來檢查，整個arr陣列中，
                                        有無符合 "arr[i]+1的值出現在arr陣列中"(題目所要找的element); */
            if(x_plus1 == arr[j]){
                isfound = true;
            }
        }

        if(isfound){
            found[i]=1;
        }
        else{
            found[i]=0;
        }
    }

    int count=0;
    for(int i=0; i< arrSize; i++){
        count+=found[i];
    }
}

2.速解法
int countElements(int * arr, int arrSize){
    //Contraints:
    //  arrSize >=1 && arrSize <=1000
    //  arr[i] >=0 && arr[i] <= 1000

    //Input:
    //  arr:    [1,1,3,3,5,5,7,7] , arrSize=8

    bool isfound[1002] = {false};   // isfound是個陣列，將陣列初值都設為false;

    for(int i=0; i<arrSize; i++){   //用loop檢查，將原初arr有出現的值都設為true，紀錄那些值有出現過;
        isfound[arr[i]] =true;      //例如 isfound[1]=true;
                                    //     isfound[1]=true;
                                    //     isfound[3]=true;
                                    //     isfound[3]=true;
                                    //     isfound[5]=true;
                                    //     isfound[5]=true;
                                    //     isfound[7]=true;
                                    //     isfound[7]=true;
    }

    int count=0;
    for(int i=0; i<arrSize; i++){  //用loop來檢查，arr[i]+1後的值有無出現在原初的arr陣列中
        int x=arr[i];
        int xplus1 = x+1;

        if(isfound[xplus1]){
            count++;
        }
    }
    return count;
}
--------------------------------------------------
//Middle of the Linked List
題目敘述
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

1.土法煉鋼
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* middleNode(struct ListNode* head){
    // step1. 計算有幾個節點
    int length = 0;
    for(struct ListNode* curr=head; curr!=NULL; curr=curr->next){
        length++;
    }
    
    //step2. 從開頭往後走length/2步
    
    struct ListNode* result=head;
    for(int i=0; i<length/2; i++){
        result=result->next;
    }
    return result;

}

2.龜兔賽跑法

struct ListNode* middleNode(struct ListNode* head){
    
    struct ListNode* fast=head;
    struct ListNode* slow=head;
    while(fast!=NULL && fast->next!=NULL){
        fast=fast->next->next; //兔子一次走兩步
        slow=slow->next;       //烏龜一次走一步
    }

    //fast ==NULL
    //兔子會先走到盡頭!!
    //此時烏龜剛好在中間
    return slow;

}
--------------------------------------------------
//Backspace String Compare
暴力法
bool backspaceCompare(char * s, char * t){
        //題目敘述
    // s:   "a##c"  len_s=4;
    // i:
    // result_s:
    // j:
    int len_s =strlen(s);
    char result_s[len_s+1];
    {
        int j=0;
        for(int i=0; i < len_s; i++){
            if(s[i] !='#'){
                result_s[j]=s[i];
                j++;
            }
            else{
                if(j > 0){ //j至少要大於0，否則可能減過頭，例如 減到result_s[-1]就不行了
                    j--;
                } 
            }
        }
        result_s[j]= '\0';
    }
    
    int len_t =strlen(t);
    char result_t[len_t+1];
    {
        int j=0;
        for(int i=0; i < len_t; i++){
            if(t[i] !='#'){
                result_t[j]=t[i];
                j++;
            }
            else{
                if(j > 0){ //j至少要大於0，否則可能減過頭，例如 減到result_s[-1]就不行了
                    j--;
                } 
            }
        }
        result_t[j]= '\0';
    }
    
    return strcmp(result_s, result_t)==0; //用strcmp來比對兩string是否相同
} 

暴力法(簡化)
char* result(char *str){
    int len_str=strlen(str);
    char* result = malloc(sizeof(char)*(len_str+1)); //c語言裡，(字串)陣列不能在函式間傳遞，所以用malloc
    {
        int j=0;
        for(int i=0; i < len_str; i++){
            if(str[i] != '#'){
                result[j]=str[i];
                j++;
            }
            else{
                if(j > 0){
                    j--;
                }
            }
        }
        result[j]='\0';
        return result;
    }
}

bool backspaceCompare(char * s, char * t){    
    char *result_s = result(s);
    char *result_t = result(t);
    bool areEqual =  (strcmp(result(s), result(t))==0);
    free(result_s);
    free(result_t); //用malloc來的memory位置記得歸還 (養成好習慣)
    return areEqual;
}
--------------------------------------------------


//Diameter of Binary Tree (任兩node之間的最長路徑)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


計算樹高的程式
int maxDepth(struct TreeNode* root){
    if(root ==NULL) return 0;
    
   
    else
    {
        int x,y;
        x=maxDepth(root->left);
        y=maxDepth(root->right);
        return (x>y?x:y)+1;
    }
}
int diameterOfBinaryTree(struct TreeNode* root){
    if(root == NULL) return 0; //邊界條件，記得加
    // 1.) 最長的路徑會通過 root
    // 起點在左邊，終點在右邊
    int middle=maxDepth(root->left)+maxDepth(root->right);

    // 2.)最長的路徑沒有通過 root (又分兩種)
    //要嘛都在左邊
    int left= diameterOfBinaryTree(root->left);

    //要嘛都在右邊
    int right= diameterOfBinaryTree(root->right);

    int max = middle;
    if(left > max){
        max = left;
    }
    if(right > max){
        max = right;
    }

    return max;

}
---------------------------------------

//Last Stone Weight
int extractMax(int *stones, int stonesSize){
    int max=stones[0];
    //下面這個for在找max
    for(int i=1; i<stonesSize; i++){  //注意從i=1開始，因為前面已經設stones[0]為max
        if(stones[i] > max){
            max = stones[i];
        }
    }
    //下面這個for在將max歸零
    for(int i=0; i<stonesSize; i++){
        if(stones[i]==max){
            stones[i]=0;
            break;
        }
    }
    return max;
}

void insert(int* stones, int stonesSize, int value){
    for(int i=0; i<stonesSize; i++){
        if(stones[i]==0){
            stones[i]=value;
            return;
        }
    }
}

int lastStoneWeight(int* stones, int stonesSize){    

    // x y
    //-----
    // 0 0 -->return 0
    // 0 y -->return y 所以(x==0時，return y就好，y可能是0也可能是一個數)
    // x y -->insert y-x
    // x 0 -->不可能發生
    while(true){
        int y=extractMax(stones, stonesSize); //y是最大值
        int x=extractMax(stones, stonesSize); //x是第二大值
        if(x==0){
            return y;
        }

        if(x!=y){
            insert(stones,stonesSize, y-x);
        }
    }
    return 0;
}
     
     
     
