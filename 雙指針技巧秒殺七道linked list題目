
ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    // 虛擬頭結點
    ListNode dummy = new ListNode(-1), p = dummy;
    ListNode p1 = l1, p2 = l2;
    
    while (p1 != null && p2 != null) {
        // 比較 p1 和 p2 兩個指針
        // 將值較小的的節點接到 p 指針
        if (p1.val > p2.val) {
            p.next = p2;
            p2 = p2.next;
        } else {
            p.next = p1;
            p1 = p1.next;
        }
        // p 指針不斷前進
        p = p.next;
    }
    
    if (p1 != null) {
        p.next = p1;
    }
    
    if (p2 != null) {
        p.next = p2;
    }
    
    return dummy.next;
}


23. Merge k Sorted Lists
/*先建立一個自帶Comparator的min-oriented PriorityQueue。初始把所有非空list head都放進pq， 之後poll出當前最小的值設置為node.next，假如這條list非空，則將其之後的節點作為head放入pq中繼續進行比較。這里insert和deleteMin操作復雜度都是O(logk)，k是lists.length
Time Complexity - O(nlogk)， Space Complexity - O(k)，  這里k為lists的長度，  n為所有的節點數
*/

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0) return null;
        
        ListNode dummy = new ListNode(-1) , p = dummy;
        
        PriorityQueue<ListNode> pq = new PriorityQueue<>(lists.length, (a,b)->(a.val - b.val));
        for (ListNode head : lists){
            if(head != null){
                pq.add(head);
            }
        }
        while (!pq.isEmpty()){
            ListNode node = pq.poll();
            p.next = node;
            if (node.next != null){
                pq.add(node.next);
            }
            p = p.next;
        }
        return dummy.next;
    }
}
